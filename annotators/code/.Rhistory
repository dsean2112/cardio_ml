#   batch 1, sample 225, 305?
sample <- 201
# 250
plot_func(testing_inputs[sample,], predictions_integer[sample,])
# plot_func(val_inputs[sample,], val_targets[sample,])
# Issue: confused with pacemakers
#   batch 1, sample 225, 305?
sample <- 245
# 250
plot_func(testing_inputs[sample,], predictions_integer[sample,])
# plot_func(val_inputs[sample,], val_targets[sample,])
# Issue: confused with pacemakers
#   batch 1, sample 225, 305?
# Inputs ------------------------------------------------------------------
output_name <- 'unet_v6_v2'
model_name <- fs::path(output_location,output_name)
model_name
save_model_tf(model, model_name)
library(keras)
library(keras)
load_model_tf(filepath = 'saved_model/UNET_12/unet_i/')
lead <- 1
# testing_inputs <- samples_full12[val_indices,,lead]
pad <- 8
# targets <- cbind(half_pad,targets,half_pad)
load('C:/Users/darre/OneDrive/Documents/UICOM Research/AF_DM/signal/af_predx/batch30.RData')
raw_inputs <- wfdb_array[,,lead]
testing_inputs <- filter_samples(raw_inputs)
half_pad <- array(0,c(nrow(testing_inputs),pad/2))
testing_inputs <- cbind(half_pad,testing_inputs,half_pad)
predictions <- model %>% predict(testing_inputs)
# targets <- cbind(half_pad,targets,half_pad)
load('C:/Users/darre/OneDrive/Documents/UICOM Research/AF_DM/signal/af_predx/batch30.RData')
model
model <- load_model_tf(filepath = 'saved_model/UNET_12/unet_i/')
lead <- 1
pad <- 8
# targets <- cbind(half_pad,targets,half_pad)
load('C:/Users/darre/OneDrive/Documents/UICOM Research/AF_DM/signal/af_predx/batch30.RData')
raw_inputs <- wfdb_array[,,lead]
testing_inputs <- filter_samples(raw_inputs)
half_pad <- array(0,c(nrow(testing_inputs),pad/2))
testing_inputs <- cbind(half_pad,testing_inputs,half_pad)
predictions <- model %>% predict(testing_inputs)
predictions_integer <- array(0,c(nrow(predictions),ncol(predictions)))
for (i in 1: nrow(predictions)) {
predictions_integer[i,] <- max.col(predictions[i,,])
}
#convert from dimension value 1,2,3,4 to 0,1,2,3
predictions_integer <- predictions_integer - 1
sample <- 230
# 250
plot_func(testing_inputs[sample,], predictions_integer[sample,])
# plot_func(val_inputs[sample,], val_targets[sample,])
# Issue: confused with pacemakers
#   batch 1, sample 225, 305?
head(predictions)
head(predictions[1,,])
head(predictions[1,100:200,])
head(predictions_integer[1,,])
head(predictions_integer[1,])
library(keras)
library(keras)
model <- load_model_tf('saved_model/UNET_12/unet_i/')
save_model_hdf5(model, 'unet_i.h5')
getwd()
model
model2 <- load_model_hdf5('unet_i.h5')
model2
c(1,2,3,4,5)
a = c(1,2,3,4,5)
b = c(4,5)
a %in b
a %in% b
library(fs)
fs::path_expand(~)
fs::path_expand('~')
getwd()
library(EGM)
EGM::read_wfdb(record = '40689238', record_dir = '../../../../Downloads/')
library(EGM)
options(wfdb_path = 'wsl /usr/local/bin')
EGM::read_wfdb(record = '40689238', record_dir = '../../../../Downloads/')
a = EGM::read_wfdb(record = '40689238', record_dir = '../../../../Downloads/')
a$signal
a$header
a$annotation
getwd()
library(EGM)
read_wfdb()
getwd()
options(wfdb_path = 'wsl /usr/local/bin')
read_wfdb(record = )
read_wfdb(record = 'MUSE_20230515_104824_48000', record_dir = '../AF_DM/wfdb/af_predx/')
a = read_wfdb(record = 'MUSE_20230515_104824_48000', record_dir = '../AF_DM/wfdb/af_predx/')
a
a$signal
a$signal$I
a$header
attributes(a$header)
a$annotation
getwd()
# On local machine --------------------------------------------------------
read.csv('C:/Users/darre/OneDrive/Documents/UICOM Research/F wave/figure_upsampledSignal.csv')
upsamp <- read.csv('C:/Users/darre/OneDrive/Documents/UICOM Research/F wave/figure_upsampledSignal.csv')
aa <- read.csv('C:/Users/darre/OneDrive/Documents/UICOM Research/F wave/figure_atrial_activity.csv')
plot_func(upsamp$x)
upsamp <- read.csv('C:/Users/darre/OneDrive/Documents/UICOM Research/F wave/figure_upsampledSignal.csv',ylim = c(-200,600))
plot_func(upsamp,ylim = c(-200,600))
plot_func(upsamp$x,ylim = c(-200,600))
plot_func(upsamp$x,ylim = c(-200,600))
plot_func(aa$x,ylim = c(-200,600))
custom_plot_func <- function(y,color = 0,linewidth=0.5,pointsize = 1.5,ylim = NULL,plotly = 'yes',x) {
# Custom plotting function, Can toggle between ggplot (plotly = 'no') vs
# plotly
library(ggplot2)
library(plotly)
color <- c(color)
y <- c(y)
x <- 1:length(y)
frame <- data.frame(Time = x, Signal = y)
plot <-
ggplot(frame, aes(Time, Signal, color = color)) + element_blank() +
geom_path(linewidth = linewidth, aes(group = 1)) + geom_point(size = pointsize) +
scale_x_continuous(breaks = seq(0, 10, 1)) +
theme(legend.position = "none") +
theme(legend.title = element_blank()) +
theme_bw() +
coord_cartesian(ylim = ylim)
# original linewidth = 0.25
return(plot)
}
custom_plot_func(upsamp$x,ylim = c(-200,600))
custom_plot_func <- function(y,color = 0,linewidth=0.5,pointsize = 1.5,ylim = NULL,plotly = 'yes',x) {
# Custom plotting function, Can toggle between ggplot (plotly = 'no') vs
# plotly
library(ggplot2)
library(plotly)
color <- c(color)
y <- c(y)
x <- 1:length(y)
frame <- data.frame(Time = x, Signal = y)
plot <-
ggplot(frame, aes(Time, Signal, color = color)) +
geom_path(linewidth = linewidth, aes(group = 1)) + geom_point(size = pointsize) +
scale_x_continuous(breaks = seq(0, 10, 1)) +
theme(legend.position = "none") +
theme(legend.title = element_blank()) +
theme_bw() +
coord_cartesian(ylim = ylim)
# original linewidth = 0.25
return(plot)
}
custom_plot_func(upsamp$x,ylim = c(-200,600))
custom_plot_func <- function(y,color = 0,linewidth=0.5,pointsize = 1.5,ylim = NULL,plotly = 'yes',x) {
# Custom plotting function, Can toggle between ggplot (plotly = 'no') vs
# plotly
library(ggplot2)
library(plotly)
color <- c(color)
y <- c(y)
x <- 1:length(y)
frame <- data.frame(Time = x, Signal = y)
plot <-
ggplot(frame, aes(Time, Signal, color = color)) +
geom_path(linewidth = linewidth, aes(group = 1)) +
geom_point(size = pointsize) +
scale_x_continuous(breaks = seq(0, 10, 1)) +
theme(legend.position = "none") +
theme(legend.title = element_blank()) +
theme_bw() +
theme(panel.grid = element_blank()) +  # This removes grid lines
coord_cartesian(ylim = ylim)
# original linewidth = 0.25
return(plot)
}
custom_plot_func(upsamp$x,ylim = c(-200,600))
custom_plot_func <- function(y,color = 0,linewidth=0.5,pointsize = 1.5,ylim = NULL,plotly = 'yes',x) {
# Custom plotting function, Can toggle between ggplot (plotly = 'no') vs
# plotly
library(ggplot2)
library(plotly)
color <- c(color)
y <- c(y)
x <- 1:length(y)
frame <- data.frame(Time = x, Signal = y)
plot <-
ggplot(frame, aes(Time, Signal, color = color)) +
geom_path(linewidth = linewidth, aes(group = 1)) +
geom_point(size = pointsize) +
scale_x_continuous(breaks = seq(0, 10, 1)) +
theme(legend.position = "none") +  # Removes the legend
theme(legend.title = element_blank()) +
theme_bw() +
theme(panel.grid = element_blank()) +  # Removes grid lines
coord_cartesian(ylim = ylim)
# original linewidth = 0.25
return(plot)
}
custom_plot_func(upsamp$x,ylim = c(-200,600))
custom_plot_func <- function(y,color = 0,linewidth=0.5,pointsize = 1.5,ylim = NULL,plotly = 'yes',x) {
# Custom plotting function, Can toggle between ggplot (plotly = 'no') vs
# plotly
library(ggplot2)
library(plotly)
color <- c(color)
y <- c(y)
x <- 1:length(y)
frame <- data.frame(Time = x, Signal = y)
plot <-
ggplot(frame, aes(Time, Signal)) +  # Removed color aesthetic from here
geom_path(linewidth = linewidth, aes(group = 1), color = "black") +
geom_point(size = pointsize, color = "black") +  # Specify color manually
scale_x_continuous(breaks = seq(0, 10, 1)) +
theme_bw() +
theme(panel.grid = element_blank()) +  # Removes grid lines
theme(legend.position = "none") +  # Removes legend
coord_cartesian(ylim = ylim)
# original linewidth = 0.25
return(plot)
}
custom_plot_func(upsamp$x,ylim = c(-200,600))
custom_plot_func <- function(y,color = 0,linewidth=0.5,pointsize = 1.5,ylim = NULL,plotly = 'yes',x) {
# Custom plotting function, Can toggle between ggplot (plotly = 'no') vs
# plotly
library(ggplot2)
library(plotly)
color <- c(color)
y <- c(y)
x <- 1:length(y)
frame <- data.frame(Time = x, Signal = y)
plot <-
ggplot(frame, aes(Time, Signal)) +  # Removed color aesthetic from here
geom_path(linewidth = linewidth, aes(group = 1), color = "darkblue") +
geom_point(size = pointsize, color = "darkblue") +  # Specify color manually
scale_x_continuous(breaks = seq(0, 10, 1)) +
theme_bw() +
theme(panel.grid = element_blank()) +  # Removes grid lines
theme(legend.position = "none") +  # Removes legend
coord_cartesian(ylim = ylim)
# original linewidth = 0.25
return(plot)
}
custom_plot_func(upsamp$x,ylim = c(-200,600))
length(upsamp$x)
custom_plot_func <- function(y,color = 0,linewidth=0.5,pointsize = 1.5,ylim = NULL,plotly = 'yes',x) {
# Custom plotting function, Can toggle between ggplot (plotly = 'no') vs
# plotly
library(ggplot2)
library(plotly)
color <- c(color)
y <- c(y)
x <- 0:10/10,000
0:10/10,000
0:10/10000
custom_plot_func <- function(y,color = 0,linewidth=0.5,pointsize = 1.5,ylim = NULL,plotly = 'yes',x) {
# Custom plotting function, Can toggle between ggplot (plotly = 'no') vs
# plotly
library(ggplot2)
library(plotly)
color <- c(color)
y <- c(y)
x <- 0:10/10000
frame <- data.frame(Time = x, Signal = y)
plot <-
ggplot(frame, aes(Time, Signal)) +  # Removed color aesthetic from here
geom_path(linewidth = linewidth, aes(group = 1), color = "darkblue") +
geom_point(size = pointsize, color = "darkblue") +  # Specify color manually
scale_x_continuous(breaks = seq(0, 10, 1)) +
theme_bw() +
theme(panel.grid = element_blank()) +  # Removes grid lines
theme(legend.position = "none") +  # Removes legend
coord_cartesian(ylim = ylim)
# original linewidth = 0.25
return(plot)
}
custom_plot_func(upsamp$x,ylim = c(-200,600))
custom_plot_func <- function(y,color = 0,linewidth=0.5,pointsize = 1.5,ylim = NULL,plotly = 'yes',x) {
# Custom plotting function, Can toggle between ggplot (plotly = 'no') vs
# plotly
library(ggplot2)
library(plotly)
color <- c(color)
y <- c(y)
x <- 1:10000/100000
frame <- data.frame(Time = x, Signal = y)
plot <-
ggplot(frame, aes(Time, Signal)) +  # Removed color aesthetic from here
geom_path(linewidth = linewidth, aes(group = 1), color = "darkblue") +
geom_point(size = pointsize, color = "darkblue") +  # Specify color manually
scale_x_continuous(breaks = seq(0, 10, 1)) +
theme_bw() +
theme(panel.grid = element_blank()) +  # Removes grid lines
theme(legend.position = "none") +  # Removes legend
coord_cartesian(ylim = ylim)
# original linewidth = 0.25
return(plot)
}
custom_plot_func(upsamp$x,ylim = c(-200,600))
1:10000/1000
tail(1:10000/1000)
custom_plot_func <- function(y,color = 0,linewidth=0.5,pointsize = 1.5,ylim = NULL,plotly = 'yes',x) {
# Custom plotting function, Can toggle between ggplot (plotly = 'no') vs
# plotly
library(ggplot2)
library(plotly)
color <- c(color)
y <- c(y)
x <- 1:10000/1000
frame <- data.frame(Time = x, Signal = y)
plot <-
ggplot(frame, aes(Time, Signal)) +  # Removed color aesthetic from here
geom_path(linewidth = linewidth, aes(group = 1), color = "darkblue") +
geom_point(size = pointsize, color = "darkblue") +  # Specify color manually
scale_x_continuous(breaks = seq(0, 10, 1)) +
theme_bw() +
theme(panel.grid = element_blank()) +  # Removes grid lines
theme(legend.position = "none") +  # Removes legend
coord_cartesian(ylim = ylim)
# original linewidth = 0.25
return(plot)
}
custom_plot_func(upsamp$x,ylim = c(-200,600))
custom_plot_func <- function(y,color = 0,linewidth=0.5,pointsize = 1.5,ylim = NULL,plotly = 'yes',x) {
# Custom plotting function, Can toggle between ggplot (plotly = 'no') vs
# plotly
library(ggplot2)
library(plotly)
color <- c(color)
y <- c(y)
x <- 1:10000/1000
frame <- data.frame(Time = x, Signal = y)
plot <-
ggplot(frame, aes(Time, Signal)) +
geom_path(linewidth = linewidth, aes(group = 1), color = "darkblue") +
geom_point(size = pointsize, color = "darkblue") +
scale_x_continuous(breaks = seq(0, 10, 1)) +
theme_bw() +
theme(panel.grid = element_blank()) +  # Removes grid lines
theme(legend.position = "none") +  # Removes legend
coord_cartesian(ylim = ylim) +
labs(x = "Time (sec)", y = "Signal (mV)")  # Adds units to axis labels
# original linewidth = 0.25
return(plot)
}
custom_plot_func(upsamp$x,ylim = c(-200,600))
custom_plot_func <- function(y,color = 0,linewidth=1.5,pointsize = 1.5,ylim = NULL,plotly = 'yes',x) {
# Custom plotting function, Can toggle between ggplot (plotly = 'no') vs
# plotly
library(ggplot2)
library(plotly)
color <- c(color)
y <- c(y)
x <- 1:10000/1000
frame <- data.frame(Time = x, Signal = y)
plot <-
ggplot(frame, aes(Time, Signal)) +
geom_path(linewidth = linewidth, aes(group = 1), color = "darkblue") +
geom_point(size = pointsize, color = "darkblue") +
scale_x_continuous(breaks = seq(0, 10, 1)) +
theme_bw() +
theme(panel.grid = element_blank()) +  # Removes grid lines
theme(legend.position = "none") +  # Removes legend
coord_cartesian(ylim = ylim) +
labs(x = "Time (sec)", y = "Signal (mV)")  # Adds units to axis labels
# original linewidth = 0.25
return(plot)
}
custom_plot_func(upsamp$x,ylim = c(-200,600))
custom_plot_func <- function(y,color = 0,linewidth=1.5,pointsize = 0.5,ylim = NULL,plotly = 'yes',x) {
# Custom plotting function, Can toggle between ggplot (plotly = 'no') vs
# plotly
library(ggplot2)
library(plotly)
color <- c(color)
y <- c(y)
x <- 1:10000/1000
frame <- data.frame(Time = x, Signal = y)
plot <-
ggplot(frame, aes(Time, Signal)) +
geom_path(linewidth = linewidth, aes(group = 1), color = "darkblue") +
geom_point(size = pointsize, color = "darkblue") +
scale_x_continuous(breaks = seq(0, 10, 1)) +
theme_bw() +
theme(panel.grid = element_blank()) +  # Removes grid lines
theme(legend.position = "none") +  # Removes legend
coord_cartesian(ylim = ylim) +
labs(x = "Time (sec)", y = "Signal (mV)")  # Adds units to axis labels
# original linewidth = 0.25
return(plot)
}
custom_plot_func(upsamp$x,ylim = c(-200,600))
custom_plot_func <- function(y,color = 0,linewidth=0.5,pointsize = 1.5,ylim = NULL,plotly = 'yes',x) {
# Custom plotting function, Can toggle between ggplot (plotly = 'no') vs
# plotly
library(ggplot2)
library(plotly)
color <- c(color)
y <- c(y)
x <- 1:10000/1000
frame <- data.frame(Time = x, Signal = y)
plot <-
ggplot(frame, aes(Time, Signal)) +
geom_path(linewidth = linewidth, aes(group = 1), color = "darkblue") +
geom_point(size = pointsize, color = "darkblue") +
scale_x_continuous(breaks = seq(0, 10, 1)) +
theme_bw() +
theme(panel.grid = element_blank()) +  # Removes grid lines
theme(legend.position = "none") +  # Removes legend
coord_cartesian(ylim = ylim) +
labs(x = "Time (sec)", y = "Signal (mV)")  # Adds units to axis labels
# original linewidth = 0.25
return(plot)
}
custom_plot_func(upsamp$x,ylim = c(-200,600))
custom_plot_func(aa$x,ylim = c(-200,600))
custom_plot_func(upsamp$x,ylim = c(-200,600))
custom_plot_func(aa$x,ylim = c(-200,600))
custom_plot_func(upsamp$x,ylim = c(-200,600))
install.packages("oro.dicom")
source("~/.active-rstudio-document", echo=TRUE)
library(oro.dicom)
# Define the folder containing the DICOM images
input_folder <- "D:\Treatment_CT_0.625mm"
# Define the folder containing the DICOM images
input_folder <- "D:/Treatment_CT_0.625mm"
output_folder <- "D:/Treatment_CT_1.25mm"
source("~/.active-rstudio-document", echo=TRUE)
# Define the folder containing the DICOM images
input_folder <- "D:/Treatment_CT_0.625mm"
output_folder <- "D:/Treatment_CT_1.25mm"
# Get a list of all DICOM files in the folder
dicom_files <- list.files(input_folder, pattern = "\\.dcm$", full.names = TRUE)
# Create output folder if it doesn't exist
if (!dir.exists(output_folder)) dir.create(output_folder)
seq(1, length(dicom_files) - 1, by = 2)
i
# Load two consecutive DICOM files
dicom1 <- readDICOMFile(dicom_files[i])
dicom_files[i]
file.exists(dicom_files[1])
readDICOMFile(dicom_files[i])
# Load two consecutive DICOM files
dicom1 <- readDICOMFile(dicom_files[i])
dicom_files[i]
# Define the folder containing the DICOM images
input_folder <- "D:/Treatment_CT_0.625mm"
output_folder <- "D:/Treatment_CT_1.25mm"
# Get a list of all DICOM files in the folder
dicom_files <- list.files(input_folder, pattern = "\\.dcm$", full.names = TRUE)
# Create output folder if it doesn't exist
if (!dir.exists(output_folder)) dir.create(output_folder)
# Loop through the DICOM files and resample the images
for (i in seq(1, length(dicom_files) - 1, by = 2)) {
# Load two consecutive DICOM files
dicom1 <- readDICOMFile(dicom_files[i])
dicom2 <- readDICOMFile(dicom_files[i + 1])
# Extract pixel data from both images
pixel1 <- dicom1$img
pixel2 <- dicom2$img
# Resample by averaging the pixel data
resampled_pixel <- (pixel1 + pixel2) / 2
# Save the resampled data as a new DICOM file
output_file <- file.path(output_folder, paste0("resampled_", i, ".dcm"))
writeDICOM(resampled_pixel, file = output_file, template = dicom1$hdr)
}
i
install.packages("divest")
writeDICOM(resampled_pixel, file = output_file, template = dicom1$hdr)
for (i in seq(1, length(dicom_files) - 1, by = 2)) {
library(divest)
# Load a DICOM file (already decompressed)
dicom1 <- read_dicom_file(dicom_files[1])
dicom2 <- read_dicom_file(dicom_files[2])
# Average pixel data to double the slice thickness
resampled_pixel <- (dicom1$img + dicom2$img) / 2
# Create a new DICOM object with the resampled pixel data
resampled_dicom <- dicom1
resampled_dicom$img <- resampled_pixel
# Write the modified DICOM file
write_dicom_file(resampled_dicom, file = "resampled_1.dcm")
}
library(divest)
install.packages('DICOMread')
1
library(DICOMread)
# writeDICOM(resampled_pixel, file = output_file, template = dicom1$hdr)
DICOMread::form_mat_fun(path_in = resampled_pixel,out_name = output_file)
x <- c()
x['apple']
x['apple'] <- 1
x
l <- list(x = 1:5, y = c('a','b'))
l
l[1]
l$x
library(EGM)
read_wfdb(record = '1', record_dir= '../annotators/LUDB/data/', annotator = 'i')
options(wfdb_path = 'wsl /usr/local/bin')
read_wfdb(record = '1', record_dir= '../annotators/LUDB/data/', annotator = 'i')
source('annotator_prep_functions.R')
setwd('../annotators/code/')
source('annotator_prep_functions.R')
out <- prep_ludb(lead = 1, annotator_style = 2)
#         1: 1 0 0 0 1 0 0 0 2 0 0 2 ...
#         2: 1 1 1 1 1 0 0 0 2 2 2 2 ...
#         3: 1 2 2 2 3 0 0 0 4 5 5 6 ...
training_signal <- out$training_signal
training_annotations <- out$training_annotations
testing_signal <- out$testing_signal
testing_annotations <- out$testing_annotations
plot_func(training_signal[1,],training_annotations[1,])
